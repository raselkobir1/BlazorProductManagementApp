
@page "/login"
@using BlazorProducts.Client.Repository
@layout Layout.PublicLayout
@using Entities.Dtos

<div class="d-flex justify-content-center mt-5">
    <div class="card p-4 shadow" style="width: 400px;">
        <h3 class="text-center">Login</h3>

        @if (ShowAuthError)
        {
            <div class="alert alert-danger text-center" role="alert">
                <p>@Error</p>
            </div>
        }

        <EditForm Model="_userForAuthentication" OnValidSubmit="ExecuteLogin">
            <DataAnnotationsValidator />

            <!-- Email Input -->
            <div class="mt-3">
                <InputText id="email" class="form-control" placeholder="Email"
                           @bind-Value="_userForAuthentication.Email" />
                <ValidationMessage For="@(() => _userForAuthentication.Email)" />
            </div>

            <!-- Password Input -->
            <div class="mt-3">
                <InputText type="password" id="password" class="form-control" placeholder="Password"
                           @bind-Value="_userForAuthentication.Password" />
                <ValidationMessage For="@(() => _userForAuthentication.Password)" />
            </div>

            <!-- Login Button -->
            <button type="submit" class="btn btn-primary w-100 mt-3">Login</button>

            <!-- Register Link -->
            <p class="mt-3 text-center">
                Don't have an account? <NavLink href="/registration">Register</NavLink>
            </p>
        </EditForm>
    </div>
</div>

@code {
    private UserForAuthenticationDto _userForAuthentication = new();
    [Inject]
    public IAuthenticationService AuthenticationService { get; set; }
    [Inject]
    public NavigationManager NavigationManager { get; set; }
    public bool ShowAuthError { get; set; }
    public string Error { get; set; }
    public async Task ExecuteLogin()
    {
        ShowAuthError = false;
        var result = await AuthenticationService.Login(_userForAuthentication);
        if (!result.IsAuthSuccessful)
        {
            Error = result.ErrorMessage;
            ShowAuthError = true;
        }
        else
        {
            NavigationManager.NavigateTo("/dashboard");
        }
    }
}